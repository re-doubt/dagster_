[tox]
envlist =
  py{39,38,37,36}-{unix,windows}-{not_graphql_context_test_suite,in_memory_instance_multi_location,sqlite_instance_multi_location,in_memory_instance_managed_grpc_env,sqlite_instance_managed_grpc_env,sqlite_instance_deployed_grpc_env,graphql_python_client}
  py{39,38,37,36}-{unix,windows}-postgres-{graphql_context_variants,instance_multi_location,instance_managed_grpc_env,instance_deployed_grpc_env}
  mypy,pylint

[testenv]
usedevelop = true
setenv =
  VIRTUALENV_PIP=21.3.1
passenv = CI_* COVERALLS_REPO_TOKEN BUILDKITE POSTGRES_TEST_DB_HOST
deps =
  -e ../dagster
  postgres: -e ../libraries/dagster-postgres

[testenv:mypy]
commands =
  mypy --config=../../pyproject.toml --non-interactive --install-types {posargs} .

[testenv:pylint]
commands =
  pylint -j0 --rcfile=../../pyproject.toml {posargs} dagster_graphql dagster_graphql_tests

[testenv:pytest]
extras =
  {extras}
  test
deps =
  ../dagster[test]
allowlist_externals =
  /bin/bash
commands =
  !windows: /bin/bash -c '! pip list --exclude-editable | grep -e dagster -e dagit'
  coverage erase
  not_graphql_context_test_suite: pytest -m "not graphql_context_test_suite and not graphql_context_variants and not python_client_test_suite" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  in_memory_instance_multi_location: pytest -m "graphql_context_test_suite and in_memory_instance and multi_location" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  in_memory_instance_managed_grpc_env: pytest -m "graphql_context_test_suite and in_memory_instance and managed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  sqlite_instance_multi_location: pytest -m "graphql_context_test_suite and in_memory_instance and multi_location" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  sqlite_instance_managed_grpc_env: pytest -m "graphql_context_test_suite and sqlite_instance and managed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  sqlite_instance_deployed_grpc_env: pytest -m "graphql_context_test_suite and sqlite_instance and deployed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  graphql_python_client: pytest -m "python_client_test_suite" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres-graphql_context_variants: pytest -m "not graphql_context_test_suite and graphql_context_variants" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres-instance_multi_location: pytest -m "graphql_context_test_suite and postgres_instance and multi_location" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres-instance_managed_grpc_env: pytest -m "graphql_context_test_suite and postgres_instance and managed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres-instance_deployed_grpc_env: pytest -m "graphql_context_test_suite and postgres_instance and deployed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  coverage report --omit='.tox/*,**/test_*.py' --skip-covered
  coverage html --omit='.tox/*,**/test_*.py'
  coverage xml --omit='.tox/*,**/test_*.py'
